/// <reference types="node" />
export = commander;
declare const commander: {
    program: any;
    Command: typeof Command;
    Argument: typeof Argument;
    Option: typeof Option;
    Help: typeof Help;
    CommanderError: typeof CommanderError;
    InvalidArgumentError: typeof InvalidArgumentError;
    InvalidOptionArgumentError: typeof InvalidArgumentError;
    commands: Command[];
    options: Option[];
    parent: any;
    _allowUnknownOption: boolean;
    _allowExcessArguments: boolean;
    _args: Argument[];
    args: string[];
    rawArgs: any[];
    processedArgs: any[];
    _scriptPath: any;
    _name: string;
    _optionValues: {};
    _optionValueSources: {};
    _storeOptionsAsProperties: boolean;
    _actionHandler: ((args: any) => any) | null;
    _executableHandler: boolean;
    _executableFile: any;
    _executableDir: string | null;
    _defaultCommandName: string | null;
    _exitCallback: any;
    _aliases: any[];
    _combineFlagAndOptionalValue: boolean;
    _description: string;
    _summary: string;
    _argsDescription: any;
    _enablePositionalOptions: boolean;
    _passThroughOptions: boolean;
    _lifeCycleHooks: {};
    _showHelpAfterError: string | boolean;
    _showSuggestionAfterError: boolean;
    _outputConfiguration: {
        writeOut: (str: any) => boolean;
        writeErr: (str: any) => boolean;
        getOutHelpWidth: () => number | undefined;
        getErrHelpWidth: () => number | undefined;
        outputError: (str: any, write: any) => any;
    };
    _hidden: boolean;
    _hasHelpOption: boolean;
    _helpFlags: string;
    _helpDescription: string;
    _helpShortFlag: string;
    _helpLongFlag: string;
    _addImplicitHelpCommand: boolean | undefined;
    _helpCommandName: string;
    _helpCommandnameAndArgs: string;
    _helpCommandDescription: string;
    _helpConfiguration: {};
    copyInheritedSettings(sourceCommand: Command): Command;
    command(nameAndArgs: string, actionOptsOrExecDesc?: any, execOpts?: any): Command;
    createCommand(name?: string | undefined): Command;
    createHelp(): Help;
    configureHelp(configuration?: any): any;
    configureOutput(configuration?: any): any;
    showHelpAfterError(displayHelp?: string | boolean | undefined): Command;
    showSuggestionAfterError(displaySuggestion?: boolean | undefined): Command;
    addCommand(cmd: Command, opts?: any): Command;
    createArgument(name: string, description?: string | undefined): Argument;
    argument(name: string, description?: string | undefined, fn?: any, defaultValue?: any): Command;
    arguments(names: string): Command;
    addArgument(argument: Argument): Command;
    addHelpCommand(enableOrNameAndArgs: any, description: any): Command;
    _hasImplicitHelpCommand(): boolean;
    hook(event: string, listener: Function): Command;
    exitOverride(fn?: Function | undefined): Command;
    _exit(exitCode: number, code: string, message: string): void;
    action(fn: Function): Command;
    createOption(flags: string, description?: string | undefined): Option;
    addOption(option: Option): Command;
    _optionEx(config: any, flags: any, description: any, fn: any, defaultValue: any): Command;
    option(flags: string, description?: string | undefined, fn?: any, defaultValue?: any): Command;
    requiredOption(flags: string, description?: string | undefined, fn?: any, defaultValue?: any): Command;
    combineFlagAndOptionalValue(combine?: boolean | undefined): any;
    allowUnknownOption(allowUnknown?: boolean | undefined): any;
    allowExcessArguments(allowExcess?: boolean | undefined): any;
    enablePositionalOptions(positional?: boolean | undefined): any;
    passThroughOptions(passThrough?: boolean | undefined): any;
    storeOptionsAsProperties(storeAsProperties?: boolean | undefined): Command;
    getOptionValue(key: string): any;
    setOptionValue(key: string, value: any): Command;
    setOptionValueWithSource(key: string, value: any, source?: string | undefined): Command;
    getOptionValueSource(key: string): string | undefined;
    getOptionValueSourceWithGlobals(key: string): string | undefined;
    _prepareUserArgs(argv: any, parseOptions: any): any;
    parse(argv?: string[] | undefined, parseOptions?: {
        from?: string | undefined;
    } | undefined): Command;
    parseAsync(argv?: string[] | undefined, parseOptions?: {
        from: string;
    } | undefined): Promise<any>;
    _executeSubCommand(subcommand: any, args: any): void;
    runningCommand: import("child_process").ChildProcess | undefined;
    _dispatchSubcommand(commandName: any, operands: any, unknown: any): void | Promise<any>;
    _dispatchHelpCommand(subcommandName: any): void | Promise<any>;
    _checkNumberOfArguments(): void;
    _processArguments(): void;
    _chainOrCall(promise: Promise<any> | undefined, fn: Function): Promise<any> | undefined;
    _chainOrCallHooks(promise: Promise<any> | undefined, event: string): Promise<any> | undefined;
    _chainOrCallSubCommandHook(promise: Promise<any> | undefined, subCommand: Command, event: string): Promise<any> | undefined;
    _parseCommand(operands: any, unknown: any): void | Promise<any>;
    _findCommand(name: any): Command | undefined;
    _findOption(arg: string): Option | undefined;
    _checkForMissingMandatoryOptions(): void;
    _checkForConflictingLocalOptions(): void;
    _checkForConflictingOptions(): void;
    parseOptions(argv: string[]): {
        operands: string[];
        unknown: string[];
    };
    opts(): any;
    optsWithGlobals(): any;
    error(message: string, errorOptions?: {
        code?: string | undefined;
        exitCode?: number | undefined;
    } | undefined): void;
    _parseOptionsEnv(): void;
    _parseOptionsImplied(): void;
    missingArgument(name: string): void;
    optionMissingArgument(option: Option): void;
    missingMandatoryOptionValue(option: Option): void;
    _conflictingOption(option: Option, conflictingOption: Option): void;
    unknownOption(flag: string): void;
    _excessArguments(receivedArgs: string[]): void;
    unknownCommand(): void;
    version(str: string, flags?: string | undefined, description?: string | undefined): string | any | undefined;
    _version: string | undefined;
    _versionOptionName: string | undefined;
    description(str?: string | undefined, argsDescription?: any): string | Command;
    summary(str?: string | undefined): string | Command;
    alias(alias?: string | undefined): string | Command;
    aliases(aliases?: string[] | undefined): string[] | Command;
    usage(str?: string | undefined): string | Command;
    _usage: string | undefined;
    name(str?: string | undefined): string | Command;
    nameFromFilename(filename: string): Command;
    executableDir(path?: string | undefined): string | Command | null;
    helpInformation(contextOptions?: {
        error: boolean;
    } | undefined): string;
    _getHelpContext(contextOptions: any): {
        error: boolean;
    };
    outputHelp(contextOptions?: Function | {
        error: boolean;
    } | undefined): void;
    helpOption(flags?: string | boolean | undefined, description?: string | undefined): Command;
    help(contextOptions?: {
        error: boolean;
    } | undefined): void;
    addHelpText(position: string, text: string | Function): Command;
    addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
    on(eventName: string | symbol, listener: (...args: any[]) => void): any;
    once(eventName: string | symbol, listener: (...args: any[]) => void): any;
    removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
    off(eventName: string | symbol, listener: (...args: any[]) => void): any;
    removeAllListeners(event?: string | symbol | undefined): any;
    setMaxListeners(n: number): any;
    getMaxListeners(): number;
    listeners(eventName: string | symbol): Function[];
    rawListeners(eventName: string | symbol): Function[];
    emit(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount(eventName: string | symbol, listener?: Function | undefined): number;
    prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
    prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
    eventNames(): (string | symbol)[];
};
import { Command } from "../command.js";
import { Argument } from "../argument.js";
import { Option } from "../option.js";
import { Help } from "../help.js";
import { CommanderError } from "../error.js";
import { InvalidArgumentError } from "../error.js";
//# sourceMappingURL=index.d.ts.map